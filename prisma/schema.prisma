generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  stripeCustomerId String? @unique

  userType UserType?
  
  onboardingCompleted Boolean @default(false)

  // Keep PascalCase to match your generated client
  Recruiter Recruiter?
  Jobseeker Jobseeker?

  SavedJobPost SavedJobPost[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  COMPANY      // Keep as COMPANY since it's in your generated client
  JOB_SEEKER
}

model Recruiter {
  id String @id @default(uuid())
  name String
  location String
  about String
  logo String
  website String
  xAccount String?

  // Match your generated client - JobPost array (not jobPosts)
  JobPost JobPost[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Jobseeker {
  id String @id @default(uuid())

  name String
  about String 
  resume String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model JobPost {
  id String @id @default(uuid())

  jobTitle String @db.VarChar(255)
  employmentType String
  location String
  salaryFrom Int    // Fixed field name from salaryForm to salaryFrom
  salaryTo Int
  jobDescription String @db.Text
  listingDuration Int
  benefits String[]

  status JobPostStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  
  recruiter Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  recruiterId String

  savedJobPosts SavedJobPost[]

  @@index([recruiterId])
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJobPost {
  id String @id @default(uuid())

  jobPost JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade) 
  jobPostId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId String 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId])
  @@index([jobPostId])
  @@index([userId])
}